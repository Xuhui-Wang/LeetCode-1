public class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.putIfAbsent(c, 0);
            map.put(c, map.get(c) + 1);
        }
        
        Character filter = null;
        Set<Character> keys = map.keySet();
        for (Character c : keys) {
            if (map.get(c) < k) {
                filter = c;
            }
        }
        
        int maxLen = 0;
        if (filter == null) {
            maxLen = s.length();
        } else {
            String[] subStrings = s.split("" + filter);
            for (String sub : subStrings) {
                maxLen = Math.max(maxLen, longestSubstring(sub, k));
            }
        }
        
        return maxLen;
    }
}
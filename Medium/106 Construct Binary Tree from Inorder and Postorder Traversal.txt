// Improved Solution: O(n) time complexity 5ms
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int[] in;
    int[] post;
    Map<Integer, Integer> idxMap;
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        in = inorder;
        post = postorder;
        if (in == null || post == null) {
            return null;
        }
        // get the <value, index> mapping relation of inorder[]
        idxMap = new HashMap<>();
        int idx = 0;
        for (int i : in) {
            idxMap.put(i, idx);
            idx += 1;
        }
        return buildTree(0, in.length - 1, 0, post.length - 1);
    }
    
    private TreeNode buildTree(int inStart, int inEnd, int postStart, int postEnd) {
        if (inStart > inEnd) {
            return null;
        }
        int target = post[postEnd];
        int idx = idxMap.get(target);
        TreeNode parent = new TreeNode(target);
        parent.left = buildTree(inStart, idx - 1, postStart, postStart + (idx - 1 - inStart));
        parent.right = buildTree(idx + 1, inEnd, postEnd - 1 - (inEnd - idx - 1), postEnd - 1);
        return parent;
    }
}